
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 164, types: 53, coercions: 0, joins: 1/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Roman.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.$trModule3 = GHC.Types.TrNameS Roman.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Roman.$trModule2 = "Roman"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.$trModule1 = GHC.Types.TrNameS Roman.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Roman.$trModule
  = GHC.Types.Module Roman.$trModule3 Roman.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl = "spec-inline.hs:(19,5)-(29,25)|function go"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
Roman.foo3 :: Int
[GblId, Str=x]
Roman.foo3
  = Control.Exception.Base.patError @ 'GHC.Types.LiftedRep @ Int lvl

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.foo2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo2 = GHC.Types.I# 6#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Roman.foo1 :: Maybe Int
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.foo1 = GHC.Base.Just @ Int Roman.foo2

-- RHS size: {terms: 124, types: 28, coercions: 0, joins: 1/3}
Roman.foo_go :: Maybe Int -> Maybe Int -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [36 30] 248 0}]
Roman.foo_go
  = \ (u :: Maybe Int) (ds :: Maybe Int) ->
      joinrec {
        $sgo [Occ=LoopBreaker]
          :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
        [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
        $sgo (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#)
          = let {
              m :: GHC.Prim.Int#
              [LclId]
              m = GHC.Prim.+#
                    (GHC.Prim.+#
                       (GHC.Prim.+#
                          (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# sc sc) sc) sc) sc)
                       sc)
                    sc } in
            case GHC.Prim.<=# sc1 0# of {
              __DEFAULT ->
                case GHC.Prim.<# sc1 100# of {
                  __DEFAULT ->
                    case GHC.Prim.<# sc1 500# of {
                      __DEFAULT -> jump $sgo (GHC.Prim.+# m m) (GHC.Prim.-# sc1 1#);
                      1# -> jump $sgo m (GHC.Prim.-# sc1 3#)
                    };
                  1# -> jump $sgo sc (GHC.Prim.-# sc1 2#)
                };
              1# -> 0#
            }; } in
      case ds of {
        Nothing -> case Roman.foo3 of wild1 { };
        Just x ->
          case x of { GHC.Types.I# ipv ->
          let {
            m :: GHC.Prim.Int#
            [LclId]
            m = GHC.Prim.+#
                  (GHC.Prim.+#
                     (GHC.Prim.+#
                        (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# ipv ipv) ipv) ipv) ipv)
                     ipv)
                  ipv } in
          case u of {
            Nothing -> jump $sgo m 10#;
            Just n ->
              case n of { GHC.Types.I# x2 ->
              case GHC.Prim.<=# x2 0# of {
                __DEFAULT ->
                  case GHC.Prim.<# x2 100# of {
                    __DEFAULT ->
                      case GHC.Prim.<# x2 500# of {
                        __DEFAULT -> jump $sgo (GHC.Prim.+# m m) (GHC.Prim.-# x2 1#);
                        1# -> jump $sgo m (GHC.Prim.-# x2 3#)
                      };
                    1# -> jump $sgo ipv (GHC.Prim.-# x2 2#)
                  };
                1# -> 0#
              }
              }
          }
          }
      }

-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
foo [InlPrag=INLINE[0]] :: Int -> Int
[GblId,
 Arity=1,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once!] :: Int) ->
                 case w of { GHC.Types.I# ww1 [Occ=Once] ->
                 case Roman.foo_go
                        (GHC.Base.Just @ Int (GHC.Types.I# ww1)) Roman.foo1
                 of ww2
                 { __DEFAULT ->
                 GHC.Types.I# ww2
                 }
                 }}]
foo
  = \ (w :: Int) ->
      case w of { GHC.Types.I# ww1 ->
      case Roman.foo_go
             (GHC.Base.Just @ Int (GHC.Types.I# ww1)) Roman.foo1
      of ww2
      { __DEFAULT ->
      GHC.Types.I# ww2
      }
      }



